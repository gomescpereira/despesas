using Fina.Core.Handlers;
using Fina.Core.Models;
using Fina.Core.Requests.Transactions;
using Microsoft.AspNetCore.Components;
using MudBlazor;

namespace Fina.Web.Pages.Transactions
{
  public partial class GetAllTransactionsPage : ComponentBase
  {
    #region Properties

    public bool IsBusy { get; set; } = false;
    public List<Transaction> Transactions { get; set; } = [];


    #endregion

    #region Services

    [Inject]
    public ITransactionHandler Handler { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = null!;

    [Inject]
    public IDialogService Dialog { get; set; } = null!;


    #endregion

    #region Overrrides
    // protected override async Task OnInitializedAsync()
    // {
    //   IsBusy = true;
    //   try
    //   {
    //      var request = new GetAllTransactionsRequest();
    //      var result = await Handler.GetAllAsync(request);
    //      if (result.IsSuccess)
    //          Transactions = result.Data ?? [];
    //   }
    //   catch (Exception ex)
    //   {
    //      Snackbar.Add(ex.Message, Severity.Error);
    //   }
    //   finally
    //   {
    //     IsBusy = false;
    //   }
    // }


    public async void OnDeleteButtonClickedAsync(long id, string title)
    {
      var result = await Dialog.ShowMessageBox(
          "ATENÇÃO",
          $"Ao prosseguir a Transaction {title} será removida. Deseja continuar?",
          yesText: "Excluir",
          cancelText: "Cancelar");

      if (result is true)
        await OnDeleteAsync(id, title);

      StateHasChanged();
    }

    public async Task OnDeleteAsync(long id, string title)
    {
      try
      {
        var request = new DeleteTransactionRequest
        {
          Id = id
        };
        await Handler.DeleteAsync(request);
        Transactions.RemoveAll(x => x.Id == id);
        Snackbar.Add($"Transacton {title} removida", Severity.Info);
      }
      catch (Exception ex)
      {
        Snackbar.Add(ex.Message, Severity.Error);
      }
    }
  }
  #endregion
}
